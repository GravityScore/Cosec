
# test_lexer.py
# By Ben Anderson
# December 2018

import unittest
from unittest import TestCase
from lexer import Tokens, Tk, IntSuffix, FloatSuffix


class TestWhitespace(TestCase):
    def test_empty_file(self):
        t = Tokens("", "")
        self.assertEqual(t.cur().type, Tk.EOF)

    def test_only_whitespace(self):
        t = Tokens("", " ")
        self.assertEqual(t.cur().type, Tk.EOF)

        t = Tokens("", "\n")
        self.assertEqual(t.cur().type, Tk.EOF)

        t = Tokens("", "\t  \r\n  \n\n   ")
        self.assertEqual(t.cur().type, Tk.EOF)

    def test_one_token(self):
        t = Tokens("", "+")
        self.assertEqual(t.cur().type, Tk.ADD)
        t.next()
        self.assertEqual(t.cur().type, Tk.EOF)

        t = Tokens("", " +")
        self.assertEqual(t.cur().type, Tk.ADD)
        t.next()
        self.assertEqual(t.cur().type, Tk.EOF)

        t = Tokens("", "+   ")
        self.assertEqual(t.cur().type, Tk.ADD)
        t.next()
        self.assertEqual(t.cur().type, Tk.EOF)

        t = Tokens("", "\n+")
        self.assertEqual(t.cur().type, Tk.ADD)
        t.next()
        self.assertEqual(t.cur().type, Tk.EOF)

        t = Tokens("", "+\n")
        self.assertEqual(t.cur().type, Tk.ADD)
        t.next()
        self.assertEqual(t.cur().type, Tk.EOF)

        t = Tokens("", "\n+\n")
        self.assertEqual(t.cur().type, Tk.ADD)
        t.next()
        self.assertEqual(t.cur().type, Tk.EOF)

        t = Tokens("", "  \t\t \n \n+\r\n \n\n   \t")
        self.assertEqual(t.cur().type, Tk.ADD)
        t.next()
        self.assertEqual(t.cur().type, Tk.EOF)

    def test_two_tokens(self):
        t = Tokens("", "+,")
        self.assertEqual(t.cur().type, Tk.ADD)
        t.next()
        self.assertEqual(t.cur().type, Tk.COMMA)
        t.next()
        self.assertEqual(t.cur().type, Tk.EOF)

        t = Tokens("", "+\n,")
        self.assertEqual(t.cur().type, Tk.ADD)
        t.next()
        self.assertEqual(t.cur().type, Tk.COMMA)
        t.next()
        self.assertEqual(t.cur().type, Tk.EOF)

        t = Tokens("", "   +\t\t  \r\n,  \t\n\r ")
        self.assertEqual(t.cur().type, Tk.ADD)
        t.next()
        self.assertEqual(t.cur().type, Tk.COMMA)
        t.next()
        self.assertEqual(t.cur().type, Tk.EOF)

    def test_line_numbers(self):
        t = Tokens("", "+")
        self.assertEqual(t.cur().type, Tk.ADD)
        self.assertEqual(t.cur().line_num, 1)
        t.next()
        self.assertEqual(t.cur().type, Tk.EOF)
        self.assertEqual(t.cur().line_num, 1)

        t = Tokens("", "\n+")
        self.assertEqual(t.cur().type, Tk.ADD)
        self.assertEqual(t.cur().line_num, 2)
        t.next()
        self.assertEqual(t.cur().type, Tk.EOF)
        self.assertEqual(t.cur().line_num, 2)

        t = Tokens("", "\r+")
        self.assertEqual(t.cur().type, Tk.ADD)
        self.assertEqual(t.cur().line_num, 2)
        t.next()
        self.assertEqual(t.cur().type, Tk.EOF)
        self.assertEqual(t.cur().line_num, 2)

        t = Tokens("", "+\r")
        self.assertEqual(t.cur().type, Tk.ADD)
        self.assertEqual(t.cur().line_num, 1)
        t.next()
        self.assertEqual(t.cur().type, Tk.EOF)
        self.assertEqual(t.cur().line_num, 2)

        t = Tokens("", "\r\n+")
        self.assertEqual(t.cur().type, Tk.ADD)
        self.assertEqual(t.cur().line_num, 2)
        t.next()
        self.assertEqual(t.cur().type, Tk.EOF)
        self.assertEqual(t.cur().line_num, 2)

        t = Tokens("", "\n\r+")
        self.assertEqual(t.cur().type, Tk.ADD)
        self.assertEqual(t.cur().line_num, 3)
        t.next()
        self.assertEqual(t.cur().type, Tk.EOF)
        self.assertEqual(t.cur().line_num, 3)

        t = Tokens("", "\n  \r\t\t  \r +\r\n \t")
        self.assertEqual(t.cur().type, Tk.ADD)
        self.assertEqual(t.cur().line_num, 4)
        t.next()
        self.assertEqual(t.cur().type, Tk.EOF)
        self.assertEqual(t.cur().line_num, 5)

        t = Tokens("", "\n +\r\t  \t\r +\r\n +\t")
        self.assertEqual(t.cur().type, Tk.ADD)
        self.assertEqual(t.cur().line_num, 2)
        t.next()
        self.assertEqual(t.cur().type, Tk.ADD)
        self.assertEqual(t.cur().line_num, 4)
        t.next()
        self.assertEqual(t.cur().type, Tk.ADD)
        self.assertEqual(t.cur().line_num, 5)
        t.next()
        self.assertEqual(t.cur().type, Tk.EOF)
        self.assertEqual(t.cur().line_num, 5)

    def test_column_numbers(self):
        t = Tokens("", "+")
        self.assertEqual(t.cur().type, Tk.ADD)
        self.assertEqual(t.cur().column_num, 1)
        t.next()
        self.assertEqual(t.cur().type, Tk.EOF)
        self.assertEqual(t.cur().column_num, 2)

        t = Tokens("", " +")
        self.assertEqual(t.cur().type, Tk.ADD)
        self.assertEqual(t.cur().column_num, 2)
        t.next()
        self.assertEqual(t.cur().type, Tk.EOF)
        self.assertEqual(t.cur().column_num, 3)

        t = Tokens("", "\t+")
        self.assertEqual(t.cur().type, Tk.ADD)
        self.assertEqual(t.cur().column_num, 2)
        t.next()
        self.assertEqual(t.cur().type, Tk.EOF)
        self.assertEqual(t.cur().column_num, 3)

        t = Tokens("", "\n+")
        self.assertEqual(t.cur().type, Tk.ADD)
        self.assertEqual(t.cur().column_num, 1)
        t.next()
        self.assertEqual(t.cur().type, Tk.EOF)
        self.assertEqual(t.cur().column_num, 2)

        t = Tokens("", "\n +")
        self.assertEqual(t.cur().type, Tk.ADD)
        self.assertEqual(t.cur().column_num, 2)
        t.next()
        self.assertEqual(t.cur().type, Tk.EOF)
        self.assertEqual(t.cur().column_num, 3)

        t = Tokens("", "\n\n\n\r  \t\t \n\r \n  +\t\t \n")
        self.assertEqual(t.cur().type, Tk.ADD)
        self.assertEqual(t.cur().column_num, 3)
        t.next()
        self.assertEqual(t.cur().type, Tk.EOF)
        self.assertEqual(t.cur().column_num, 1)

    def test_line_text(self):
        t = Tokens("", "+")
        self.assertEqual(t.cur().type, Tk.ADD)
        self.assertEqual(t.cur().line, "+")
        t.next()
        self.assertEqual(t.cur().type, Tk.EOF)
        self.assertEqual(t.cur().line, "+")

        t = Tokens("", "\r\n+")
        self.assertEqual(t.cur().type, Tk.ADD)
        self.assertEqual(t.cur().line, "+")
        t.next()
        self.assertEqual(t.cur().type, Tk.EOF)
        self.assertEqual(t.cur().line, "+")

        t = Tokens("", "+\r\n")
        self.assertEqual(t.cur().type, Tk.ADD)
        self.assertEqual(t.cur().line, "+")
        t.next()
        self.assertEqual(t.cur().type, Tk.EOF)
        self.assertEqual(t.cur().line, "")

        t = Tokens("", "+  \r\n  \t\t \t \v\n")
        self.assertEqual(t.cur().type, Tk.ADD)
        self.assertEqual(t.cur().line, "+")
        t.next()
        self.assertEqual(t.cur().type, Tk.EOF)
        self.assertEqual(t.cur().line, "")

        t = Tokens("", "   \t+  \r\n  \t\t \t \v\n")
        self.assertEqual(t.cur().type, Tk.ADD)
        self.assertEqual(t.cur().line, "   \t+")
        t.next()
        self.assertEqual(t.cur().type, Tk.EOF)
        self.assertEqual(t.cur().line, "")

        t = Tokens("", "+   \t+  \r\n  \t\t\n +\t \v\n  ")
        self.assertEqual(t.cur().type, Tk.ADD)
        self.assertEqual(t.cur().line, "+   \t+")
        t.next()
        self.assertEqual(t.cur().type, Tk.ADD)
        self.assertEqual(t.cur().line, "+   \t+")
        t.next()
        self.assertEqual(t.cur().type, Tk.ADD)
        self.assertEqual(t.cur().line, " +")
        t.next()
        self.assertEqual(t.cur().type, Tk.EOF)
        self.assertEqual(t.cur().line, "")


class TestSyntaxTokens(TestCase):
    def test_one_character_tokens(self):
        t = Tokens("", "+ > > = ! =")
        self.assertEqual(t.cur().type, Tk.ADD)
        t.next()
        self.assertEqual(t.cur().type, Tk.GT)
        t.next()
        self.assertEqual(t.cur().type, Tk.GT)
        t.next()
        self.assertEqual(t.cur().type, Tk.ASSIGN)
        t.next()
        self.assertEqual(t.cur().type, Tk.LOGICAL_NOT)
        t.next()
        self.assertEqual(t.cur().type, Tk.ASSIGN)
        t.next()
        self.assertEqual(t.cur().type, Tk.EOF)
        t.next()

    def test_two_character_tokens(self):
        t = Tokens("", "++ >> = !=")
        self.assertEqual(t.cur().type, Tk.INC)
        t.next()
        self.assertEqual(t.cur().type, Tk.RSHIFT)
        t.next()
        self.assertEqual(t.cur().type, Tk.ASSIGN)
        t.next()
        self.assertEqual(t.cur().type, Tk.NEQ)
        t.next()
        self.assertEqual(t.cur().type, Tk.EOF)

    def test_three_character_tokens(self):
        t = Tokens("", "> >>= != . ...")
        self.assertEqual(t.cur().type, Tk.GT)
        t.next()
        self.assertEqual(t.cur().type, Tk.RSHIFT_ASSIGN)
        t.next()
        self.assertEqual(t.cur().type, Tk.NEQ)
        t.next()
        self.assertEqual(t.cur().type, Tk.DOT)
        t.next()
        self.assertEqual(t.cur().type, Tk.ELLIPSIS)
        t.next()
        self.assertEqual(t.cur().type, Tk.EOF)


class TestIdentifiers(TestCase):
    def test_one_character_identifier(self):
        t = Tokens("", "a")
        self.assertEqual(t.cur().type, Tk.IDENT)
        self.assertEqual(t.cur().contents, "a")
        t.next()
        self.assertEqual(t.cur().type, Tk.EOF)

    def test_two_character_identifier(self):
        t = Tokens("", "hi")
        self.assertEqual(t.cur().type, Tk.IDENT)
        self.assertEqual(t.cur().contents, "hi")
        t.next()
        self.assertEqual(t.cur().type, Tk.EOF)

    def test_underscore(self):
        t = Tokens("", "_")
        self.assertEqual(t.cur().type, Tk.IDENT)
        self.assertEqual(t.cur().contents, "_")
        t.next()
        self.assertEqual(t.cur().type, Tk.EOF)

    def test_multiple_underscores(self):
        t = Tokens("", "____")
        self.assertEqual(t.cur().type, Tk.IDENT)
        self.assertEqual(t.cur().contents, "____")
        t.next()
        self.assertEqual(t.cur().type, Tk.EOF)

    def test_starting_with_underscores(self):
        t = Tokens("", "_a __a _hi __hello__")
        self.assertEqual(t.cur().type, Tk.IDENT)
        self.assertEqual(t.cur().contents, "_a")
        t.next()
        self.assertEqual(t.cur().type, Tk.IDENT)
        self.assertEqual(t.cur().contents, "__a")
        t.next()
        self.assertEqual(t.cur().type, Tk.IDENT)
        self.assertEqual(t.cur().contents, "_hi")
        t.next()
        self.assertEqual(t.cur().type, Tk.IDENT)
        self.assertEqual(t.cur().contents, "__hello__")
        t.next()
        self.assertEqual(t.cur().type, Tk.EOF)

    def test_underscores_and_numbers(self):
        t = Tokens("", "_3 __123")
        self.assertEqual(t.cur().type, Tk.IDENT)
        self.assertEqual(t.cur().contents, "_3")
        t.next()
        self.assertEqual(t.cur().type, Tk.IDENT)
        self.assertEqual(t.cur().contents, "__123")
        t.next()
        self.assertEqual(t.cur().type, Tk.EOF)

    def test_letters_and_numbers(self):
        t = Tokens("", "h3ll0 _h3_l_0")
        self.assertEqual(t.cur().type, Tk.IDENT)
        self.assertEqual(t.cur().contents, "h3ll0")
        t.next()
        self.assertEqual(t.cur().type, Tk.IDENT)
        self.assertEqual(t.cur().contents, "_h3_l_0")
        t.next()
        self.assertEqual(t.cur().type, Tk.EOF)


class TestKeywords(TestCase):
    def test_common_keywords(self):
        t = Tokens("", "for if while")
        self.assertEqual(t.cur().type, Tk.FOR)
        t.next()
        self.assertEqual(t.cur().type, Tk.IF)
        t.next()
        self.assertEqual(t.cur().type, Tk.WHILE)
        t.next()
        self.assertEqual(t.cur().type, Tk.EOF)

    def test_identifiers_containing_keywords(self):
        t = Tokens("", "forhello forwhile for_ _for")
        self.assertEqual(t.cur().type, Tk.IDENT)
        self.assertEqual(t.cur().contents, "forhello")
        t.next()
        self.assertEqual(t.cur().type, Tk.IDENT)
        self.assertEqual(t.cur().contents, "forwhile")
        t.next()
        self.assertEqual(t.cur().type, Tk.IDENT)
        self.assertEqual(t.cur().contents, "for_")
        t.next()
        self.assertEqual(t.cur().type, Tk.IDENT)
        self.assertEqual(t.cur().contents, "_for")
        t.next()
        self.assertEqual(t.cur().type, Tk.EOF)


class TestIntegers(TestCase):
    def test_decimal(self):
        t = Tokens("", "1 12 123 31415926535")
        self.assertEqual(t.cur().type, Tk.CONST_INT)
        self.assertEqual(t.cur().number, 1)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_INT)
        self.assertEqual(t.cur().number, 12)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_INT)
        self.assertEqual(t.cur().number, 123)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_INT)
        self.assertEqual(t.cur().number, 31415926535)
        t.next()
        self.assertEqual(t.cur().type, Tk.EOF)

    def test_octal(self):
        t = Tokens("", "0 07 000004 03141567")
        self.assertEqual(t.cur().type, Tk.CONST_INT)
        self.assertEqual(t.cur().number, 0)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_INT)
        self.assertEqual(t.cur().number, 7)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_INT)
        self.assertEqual(t.cur().number, 4)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_INT)
        self.assertEqual(t.cur().number, 836471)
        t.next()
        self.assertEqual(t.cur().type, Tk.EOF)

    def test_hexadecimal(self):
        t = Tokens("", "0x1 0X1 0x0 0xabc 0xABC 0xAbC 0x0a 0x00000000a")
        self.assertEqual(t.cur().type, Tk.CONST_INT)
        self.assertEqual(t.cur().number, 1)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_INT)
        self.assertEqual(t.cur().number, 1)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_INT)
        self.assertEqual(t.cur().number, 0)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_INT)
        self.assertEqual(t.cur().number, 0xABC)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_INT)
        self.assertEqual(t.cur().number, 0xABC)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_INT)
        self.assertEqual(t.cur().number, 0xABC)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_INT)
        self.assertEqual(t.cur().number, 0xA)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_INT)
        self.assertEqual(t.cur().number, 0xA)
        t.next()
        self.assertEqual(t.cur().type, Tk.EOF)

    def test_suffixes(self):
        t = Tokens("", "1 1U 1u 1l 1L 1LL 1UL 1LU 0x0L 0x1Ull 0777LU")
        self.assertEqual(t.cur().type, Tk.CONST_INT)
        self.assertEqual(t.cur().number, 1)
        self.assertTrue(t.cur().suffix is None)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_INT)
        self.assertEqual(t.cur().number, 1)
        self.assertEqual(t.cur().suffix, IntSuffix.UINT)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_INT)
        self.assertEqual(t.cur().number, 1)
        self.assertEqual(t.cur().suffix, IntSuffix.UINT)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_INT)
        self.assertEqual(t.cur().number, 1)
        self.assertEqual(t.cur().suffix, IntSuffix.LONG)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_INT)
        self.assertEqual(t.cur().number, 1)
        self.assertEqual(t.cur().suffix, IntSuffix.LONG)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_INT)
        self.assertEqual(t.cur().number, 1)
        self.assertEqual(t.cur().suffix, IntSuffix.LLONG)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_INT)
        self.assertEqual(t.cur().number, 1)
        self.assertEqual(t.cur().suffix, IntSuffix.ULONG)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_INT)
        self.assertEqual(t.cur().number, 1)
        self.assertEqual(t.cur().suffix, IntSuffix.ULONG)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_INT)
        self.assertEqual(t.cur().number, 0)
        self.assertEqual(t.cur().suffix, IntSuffix.LONG)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_INT)
        self.assertEqual(t.cur().number, 1)
        self.assertEqual(t.cur().suffix, IntSuffix.ULLONG)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_INT)
        self.assertEqual(t.cur().number, 511)
        self.assertEqual(t.cur().suffix, IntSuffix.ULONG)
        t.next()
        self.assertEqual(t.cur().type, Tk.EOF)


class TestFloats(TestCase):
    def test_decimal(self):
        t = Tokens("", "1.0 0.1 1.1 .1 1. .0 0.")
        self.assertEqual(t.cur().type, Tk.CONST_FLOAT)
        self.assertEqual(t.cur().number, 1.0)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_FLOAT)
        self.assertEqual(t.cur().number, 0.1)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_FLOAT)
        self.assertEqual(t.cur().number, 1.1)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_FLOAT)
        self.assertEqual(t.cur().number, 0.1)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_FLOAT)
        self.assertEqual(t.cur().number, 1.0)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_FLOAT)
        self.assertEqual(t.cur().number, 0.0)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_FLOAT)
        self.assertEqual(t.cur().number, 0.0)
        t.next()
        self.assertEqual(t.cur().type, Tk.EOF)

    def test_decimal_exponents(self):
        t = Tokens("", "1e2 1E2 1e+2 1E-1 1e0")
        self.assertEqual(t.cur().type, Tk.CONST_FLOAT)
        self.assertEqual(t.cur().number, 100.0)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_FLOAT)
        self.assertEqual(t.cur().number, 100.0)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_FLOAT)
        self.assertEqual(t.cur().number, 100.0)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_FLOAT)
        self.assertEqual(t.cur().number, 0.1)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_FLOAT)
        self.assertEqual(t.cur().number, 1.0)
        t.next()
        self.assertEqual(t.cur().type, Tk.EOF)

    def test_decimal_suffixes(self):
        t = Tokens("", "1.0f 1.0F 1.0l 1.0L .0f 0.f 1e0f 1e2L 1.1e-2F")
        self.assertEqual(t.cur().type, Tk.CONST_FLOAT)
        self.assertEqual(t.cur().number, 1.0)
        self.assertEqual(t.cur().suffix, FloatSuffix.FLOAT)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_FLOAT)
        self.assertEqual(t.cur().number, 1.0)
        self.assertEqual(t.cur().suffix, FloatSuffix.FLOAT)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_FLOAT)
        self.assertEqual(t.cur().number, 1.0)
        self.assertEqual(t.cur().suffix, FloatSuffix.LDOUBLE)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_FLOAT)
        self.assertEqual(t.cur().number, 1.0)
        self.assertEqual(t.cur().suffix, FloatSuffix.LDOUBLE)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_FLOAT)
        self.assertEqual(t.cur().number, 0.0)
        self.assertEqual(t.cur().suffix, FloatSuffix.FLOAT)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_FLOAT)
        self.assertEqual(t.cur().number, 0.0)
        self.assertEqual(t.cur().suffix, FloatSuffix.FLOAT)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_FLOAT)
        self.assertEqual(t.cur().number, 1.0)
        self.assertEqual(t.cur().suffix, FloatSuffix.FLOAT)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_FLOAT)
        self.assertEqual(t.cur().number, 100.0)
        self.assertEqual(t.cur().suffix, FloatSuffix.LDOUBLE)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_FLOAT)
        self.assertEqual(t.cur().number, 0.011)
        self.assertEqual(t.cur().suffix, FloatSuffix.FLOAT)
        t.next()
        self.assertEqual(t.cur().type, Tk.EOF)

    def test_hexadecimal(self):
        t = Tokens("", "0x0.0p0 0x0.aP1 0xA.0P+1 0xa.Bp-1 0x.ap1 0x0.p1 0x.0P1")
        self.assertEqual(t.cur().type, Tk.CONST_FLOAT)
        self.assertEqual(t.cur().number, 0.0)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_FLOAT)
        self.assertEqual(t.cur().number, 1.25)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_FLOAT)
        self.assertEqual(t.cur().number, 20.0)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_FLOAT)
        self.assertEqual(t.cur().number, 5.34375)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_FLOAT)
        self.assertEqual(t.cur().number, 1.25)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_FLOAT)
        self.assertEqual(t.cur().number, 0.0)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_FLOAT)
        self.assertEqual(t.cur().number, 0.0)
        t.next()
        self.assertEqual(t.cur().type, Tk.EOF)

    def test_hexadecimal_suffixes(self):
        t = Tokens("", "0x0.0p0f 0x0.0P0F 0x0.0P+0l 0x0.0p-0L 0x0.p0f 0x.0p0L "
                       "0x0p2f 0x1P-1L 0x1.1p-2F")
        self.assertEqual(t.cur().type, Tk.CONST_FLOAT)
        self.assertEqual(t.cur().number, 0.0)
        self.assertEqual(t.cur().suffix, FloatSuffix.FLOAT)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_FLOAT)
        self.assertEqual(t.cur().number, 0.0)
        self.assertEqual(t.cur().suffix, FloatSuffix.FLOAT)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_FLOAT)
        self.assertEqual(t.cur().number, 0.0)
        self.assertEqual(t.cur().suffix, FloatSuffix.LDOUBLE)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_FLOAT)
        self.assertEqual(t.cur().number, 0.0)
        self.assertEqual(t.cur().suffix, FloatSuffix.LDOUBLE)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_FLOAT)
        self.assertEqual(t.cur().number, 0.0)
        self.assertEqual(t.cur().suffix, FloatSuffix.FLOAT)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_FLOAT)
        self.assertEqual(t.cur().number, 0.0)
        self.assertEqual(t.cur().suffix, FloatSuffix.LDOUBLE)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_FLOAT)
        self.assertEqual(t.cur().number, 0.0)
        self.assertEqual(t.cur().suffix, FloatSuffix.FLOAT)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_FLOAT)
        self.assertEqual(t.cur().number, 0.5)
        self.assertEqual(t.cur().suffix, FloatSuffix.LDOUBLE)
        t.next()
        self.assertEqual(t.cur().type, Tk.CONST_FLOAT)
        self.assertEqual(t.cur().number, 0.265625)
        self.assertEqual(t.cur().suffix, FloatSuffix.FLOAT)
        t.next()
        self.assertEqual(t.cur().type, Tk.EOF)


if __name__ == "__main__":
    unittest.main()
